import json
import os
from datetime import datetime
import pandas as pd
import numpy as np # For numpy_encoder dependency
import matplotlib.pyplot as plt
import seaborn as sns
import re
from adaptive_eda_executor import top_n_frequency, _fig_to_base64

# Helper function for NumPy JSON serialization (Must be available here too)
def numpy_encoder(obj):
    """Convert numpy types to native Python types for JSON serialization."""
    if isinstance(obj, np.integer):
        return int(obj)
    elif isinstance(obj, np.floating):
        return float(obj)
    elif isinstance(obj, np.bool_):
        return bool(obj)
    # Handle pandas types not covered by np types
    if isinstance(obj, pd.Series) or isinstance(obj, pd.Index):
        return obj.tolist()
    return json.JSONEncoder.default(obj)


def save_final_markdown_report(report_text: str, output_path: str):
    """Saves the final narrative Markdown report generated by Gemini."""
    try:
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(report_text)
        print(f"[Report] Final narrative report saved successfully to: {output_path}")
    except Exception as e:
        print(f"⚠️ Failed to save final markdown report: {e}")

def generate_final_report(data_prep_plan: dict, eda_plan: dict, eda_results: dict, output_dir: str) -> str:
    """
    Generates the final narrative report by calling Gemini with all inputs.
    """
    eda_results_markdown = eda_results.get("markdown_with_base64", "")
    summary_statistics = eda_results.get("summary_statistics", {})

    final_report = gemini_generate_final_report(
        data_prep_plan, eda_plan, eda_results_markdown, summary_statistics, output_dir
    )

    return final_report

def generate_report(original_df, cleaned_df, data_prep_plan, eda_plan, output_path: str):
    """
    Generates a structured JSON report summarizing the data cleaning and EDA plan metadata.
    """
    report = {
        "metadata": {
            "original_shape": original_df.shape,
            "cleaned_shape": cleaned_df.shape,
            "retrieved_at": datetime.now().isoformat()
        },
        "cleaning_summary": {
            "duplicates_removed": original_df.shape[0] - cleaned_df.shape[0],
            "columns_converted": [c for c in cleaned_df.columns if c not in original_df.columns]
        },
        "data_prep_plan": data_prep_plan,
        "eda_plan": eda_plan,
    }
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    with open(output_path, "w") as f:
        # Use numpy_encoder for robust JSON serialization
        json.dump(report, f, indent=2, default=numpy_encoder)
